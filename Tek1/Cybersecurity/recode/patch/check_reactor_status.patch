diff --git a/recode/src/commands/check_reactor_status.c b/recode/src/commands/check_reactor_status.c
index 9dcac98..7e0fdb5 100644
--- a/recode/src/commands/check_reactor_status.c
+++ b/recode/src/commands/check_reactor_status.c
@@ -6,44 +6,49 @@
 */
 
 #include <stdio.h>
+#include <string.h>
 #include <unistd.h>
 
-void encrypt_message(const char *input, char *output, int shift)
+static void print_checking_step(const char *msg, int delay)
 {
-    for (int i = 0; input[i] != '\0'; i++) {
-        if (input[i] >= 'A' && input[i] <= 'Z') {
-            output[i] = ((input[i] - 'A' + shift) % 26) + 'A';
-        } else if (input[i] >= 'a' && input[i] <= 'z') {
-            output[i] = ((input[i] - 'a' + shift) % 26) + 'a';
-        } else {
-            output[i] = input[i];
-        }
+    printf("%s\n", msg);
+    sleep(delay);
+}
+
+static void xor_encrypt(const char *input, char *output, const char *key)
+{
+    size_t key_len = strlen(key);
+
+    for (size_t i = 0; input[i] != '\0'; i++) {
+        output[i] = input[i] ^ key[i % key_len];
     }
+    output[strlen(input)] = '\0';
 }
 
-void check_reactor_status()
+static void print_encrypted_status(const char *msg)
 {
-    printf("Starting reactor status check...\n");
-    sleep(1);
-    printf("Checking core temperature...\n");
-    sleep(1);
-    printf("Core temperature: Normal\n");
-    sleep(1);
-    printf("Checking coolant flow rate...\n");
-    sleep(1);
-    printf("Coolant flow rate: Stable\n");
-    sleep(1);
-    printf("Checking radiation levels...\n");
-    sleep(2);
-    printf("Radiation levels: Safe\n\n");
+    char encrypted[64] = {0};
+    const char *key = "pipetomaispaspipetard";
 
-    printf("Encrypting critical reactor data...\n");
-    const char *message = "ReactorStatusOK";
-    char encrypted_message[50] = {0};
-    encrypt_message(message, encrypted_message, 3);
+    xor_encrypt(msg, encrypted, key);
     sleep(1);
-    printf("Encrypted message: %s\n\n", encrypted_message);
+    printf("Encrypted message: ");
+    for (size_t i = 0; msg[i] != '\0'; i++)
+        printf("%02X", (unsigned char)encrypted[i]);
+    printf("\n\n");
+}
 
+void check_reactor_status(void)
+{
+    printf("Starting reactor status check...\n");
+    print_checking_step("Checking core temperature...", 1);
+    print_checking_step("Core temperature: Normal", 1);
+    print_checking_step("Checking coolant flow rate...", 1);
+    print_checking_step("Coolant flow rate: Stable", 1);
+    print_checking_step("Checking radiation levels...", 2);
+    print_checking_step("Radiation levels: Safe\n", 0);
+    printf("Encrypting critical reactor data...\n");
+    print_encrypted_status("ReactorStatusOK");
     printf("Reactor status: OK\n");
     printf("Reactor status check complete.\n\n");
-}
\ No newline at end of file
+}
